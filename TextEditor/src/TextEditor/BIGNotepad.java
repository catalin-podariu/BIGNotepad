/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TextEditor;

import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.InputEvent;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.IOException;
import javax.swing.text.BadLocationException;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import java.lang.reflect.Field;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Mr.BiG Heart
 */
public class BIGNotepad extends javax.swing.JFrame {

    // default constructor
    public BIGNotepad() {
        defaultTempFolder = "C:\\InternalSettings.properties";
    }

    public static BIGNotepad getInstance() {
        BIGNotepad notepad = new BIGNotepad();
        notepad.initComponents();
        // default settings
        notepad.initConfig();
        return notepad;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        quickMenu = new javax.swing.JPopupMenu();
        quickUndo = new javax.swing.JMenuItem();
        quickRedo = new javax.swing.JMenuItem();
        quickMenuS1 = new javax.swing.JPopupMenu.Separator();
        quickCut = new javax.swing.JMenuItem();
        quickCopy = new javax.swing.JMenuItem();
        quickCopyAll = new javax.swing.JMenuItem();
        quickPaste = new javax.swing.JMenuItem();
        quickSwap = new javax.swing.JMenuItem();
        quickClear = new javax.swing.JMenuItem();
        quickMenuS2 = new javax.swing.JPopupMenu.Separator();
        quickSelectAll = new javax.swing.JMenuItem();
        replaceDialog = new javax.swing.JDialog();
        replaceDFindNext = new javax.swing.JButton();
        replaceDFindPrev = new javax.swing.JButton();
        replaceDReplace = new javax.swing.JButton();
        replaceDReplaceAll = new javax.swing.JButton();
        replaceDClose = new javax.swing.JButton();
        replaceDSearchLabel = new javax.swing.JLabel();
        replaceDSearchCombo = new javax.swing.JComboBox();
        replaceDReplaceLabel = new javax.swing.JLabel();
        replaceDReplaceCombo = new javax.swing.JComboBox();
        replaceDMatchWord = new javax.swing.JCheckBox();
        replaceDMatchCase = new javax.swing.JCheckBox();
        replaceDRegex = new javax.swing.JCheckBox();
        replaceDMatchWordStart = new javax.swing.JCheckBox();
        replaceGotoFind = new javax.swing.JLabel();
        replaceDNothingFound = new javax.swing.JLabel();
        findDialog = new javax.swing.JDialog();
        findDFindNext = new javax.swing.JButton();
        findDFindPrev = new javax.swing.JButton();
        findDClose = new javax.swing.JButton();
        findDSearchLabel = new javax.swing.JLabel();
        findDSearchCombo = new javax.swing.JComboBox();
        findDMatchWord = new javax.swing.JCheckBox();
        findDMatchCase = new javax.swing.JCheckBox();
        findDRegex = new javax.swing.JCheckBox();
        findDMatchWordStart = new javax.swing.JCheckBox();
        findGotoReplace = new javax.swing.JLabel();
        nothingFoundLabel = new javax.swing.JLabel();
        aboutDialog = new javax.swing.JDialog();
        clickable = new javax.swing.JLabel();
        aboutPane = new javax.swing.JTabbedPane();
        aboutAuthorPanel = new javax.swing.JPanel();
        aboutAuthorP = new javax.swing.JScrollPane();
        aboutAuthorText = new javax.swing.JTextArea();
        aboutSoftwarePanel = new javax.swing.JPanel();
        aboutSoftwareP = new javax.swing.JScrollPane();
        aboutSoftwareText = new javax.swing.JTextArea();
        quickIconsPanel = new javax.swing.JPanel();
        newFileIcon = new javax.swing.JLabel();
        separatorLabel = new javax.swing.JLabel();
        openFileIcon = new javax.swing.JLabel();
        separatorLabel1 = new javax.swing.JLabel();
        saveFileIcon = new javax.swing.JLabel();
        separatorLabel2 = new javax.swing.JLabel();
        findStringIcon = new javax.swing.JLabel();
        separatorLabel3 = new javax.swing.JLabel();
        editorScrollPane = new javax.swing.JScrollPane();
        bigEdit = new javax.swing.JTextPane();
        mainStatusPanel = new javax.swing.JPanel();
        lineColSelStatusPanel = new javax.swing.JPanel();
        lineColSelStatusLabel = new javax.swing.JLabel();
        encodingStatusPanel = new javax.swing.JPanel();
        encodingStatusLabel = new javax.swing.JLabel();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileNewMenuItem = new javax.swing.JMenuItem();
        fileNewEmptyWindow = new javax.swing.JMenuItem();
        fileOpenMenuItem = new javax.swing.JMenuItem();
        fileSeparator1 = new javax.swing.JPopupMenu.Separator();
        fileSaveMenuItem = new javax.swing.JMenuItem();
        fileSaveAsMenuItem = new javax.swing.JMenuItem();
        fileSetReadOnlyMenuItem = new javax.swing.JCheckBoxMenuItem();
        fileSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        fileEncodingANSI = new javax.swing.JMenuItem();
        fileEncodingUnicode = new javax.swing.JMenuItem();
        fileEncodingBE = new javax.swing.JMenuItem();
        fileEncodingUTF8 = new javax.swing.JMenuItem();
        fileEncodingLatin1 = new javax.swing.JMenuItem();
        fileSeparator3 = new javax.swing.JPopupMenu.Separator();
        filePrintMenuItem = new javax.swing.JMenuItem();
        fileSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem8 = new javax.swing.JMenuItem();
        fileSeparator5 = new javax.swing.JPopupMenu.Separator();
        fileRecentMenu = new javax.swing.JMenu();
        fileSeparator6 = new javax.swing.JPopupMenu.Separator();
        fileExitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        editUndoMenuItem = new javax.swing.JMenuItem();
        editRedoMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        editCutMenuItem = new javax.swing.JMenuItem();
        editCopyMenuItem = new javax.swing.JMenuItem();
        editPasteMenuItem = new javax.swing.JMenuItem();
        editSelectAllMenuItem = new javax.swing.JMenuItem();
        editClearClipboardMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        findMenuItem = new javax.swing.JMenuItem();
        replaceMenuItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        editInsertMenu = new javax.swing.JMenu();
        insertShortDate = new javax.swing.JMenuItem();
        insertLongDate = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        editConvertMenu = new javax.swing.JMenu();
        editConvToLowerCase = new javax.swing.JMenuItem();
        editConvToUpperCase = new javax.swing.JMenuItem();
        editConvInvertCase = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        viewLongLineMenuItem = new javax.swing.JCheckBoxMenuItem();
        viewWrapMenuItem = new javax.swing.JCheckBoxMenuItem();
        viewDefaultFont = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        viewQuickMMenuItem = new javax.swing.JCheckBoxMenuItem();
        viewStatusBarMenuItem = new javax.swing.JCheckBoxMenuItem();
        displayLineNumMenuItem = new javax.swing.JCheckBoxMenuItem();
        viewThemeMenuItem = new javax.swing.JMenuItem();
        viewResetZoomMenuItem = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        settAlwaysOnTopMenuItem = new javax.swing.JCheckBoxMenuItem();
        setMinToTrayMenuItem = new javax.swing.JCheckBoxMenuItem();
        settingsWinSizePosition = new javax.swing.JCheckBoxMenuItem();
        settRecentFilesMenuItem = new javax.swing.JCheckBoxMenuItem();
        settRecentSearchMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenu1 = new javax.swing.JMenu();
        winTitleDisplayMode0 = new javax.swing.JMenuItem();
        winTitleDisplayMode1 = new javax.swing.JMenuItem();
        winTitleDisplayMode2 = new javax.swing.JMenuItem();
        settSaveOnExitMenuItem = new javax.swing.JCheckBoxMenuItem();
        settSaveNowMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        settingsResetAll = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpTopics = new javax.swing.JMenuItem();
        aboutAuthorMenuItem = new javax.swing.JMenuItem();

        quickMenu.setBackground(new java.awt.Color(0, 51, 51));
        quickMenu.setForeground(new java.awt.Color(204, 204, 204));
        quickMenu.setInvoker(bigEdit);
        quickMenu.setLabel("quick menu");
        quickMenu.setMaximumSize(new java.awt.Dimension(100, 200));
        quickMenu.setMinimumSize(new java.awt.Dimension(100, 200));
        quickMenu.setPreferredSize(new java.awt.Dimension(100, 160));

        quickUndo.setText("Undo");
        quickUndo.setMaximumSize(new java.awt.Dimension(100, 20));
        quickUndo.setMinimumSize(new java.awt.Dimension(107, 20));
        quickUndo.setPreferredSize(new java.awt.Dimension(107, 15));
        quickUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickUndoActionPerformed(evt);
            }
        });
        quickMenu.add(quickUndo);

        quickRedo.setText("Redo");
        quickRedo.setMaximumSize(new java.awt.Dimension(100, 20));
        quickRedo.setMinimumSize(new java.awt.Dimension(107, 20));
        quickRedo.setPreferredSize(new java.awt.Dimension(107, 15));
        quickRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickRedoActionPerformed(evt);
            }
        });
        quickMenu.add(quickRedo);
        quickMenu.add(quickMenuS1);

        quickCut.setText("Cut");
        quickCut.setMaximumSize(new java.awt.Dimension(100, 20));
        quickCut.setMinimumSize(new java.awt.Dimension(107, 20));
        quickCut.setPreferredSize(new java.awt.Dimension(107, 15));
        quickCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickCutActionPerformed(evt);
            }
        });
        quickMenu.add(quickCut);

        quickCopy.setText("Copy");
        quickCopy.setMaximumSize(new java.awt.Dimension(100, 20));
        quickCopy.setMinimumSize(new java.awt.Dimension(107, 20));
        quickCopy.setPreferredSize(new java.awt.Dimension(107, 15));
        quickCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickCopyActionPerformed(evt);
            }
        });
        quickMenu.add(quickCopy);

        quickCopyAll.setText("Copy All");
        quickCopyAll.setMaximumSize(new java.awt.Dimension(100, 20));
        quickCopyAll.setMinimumSize(new java.awt.Dimension(107, 20));
        quickCopyAll.setPreferredSize(new java.awt.Dimension(107, 15));
        quickCopyAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickCopyAllActionPerformed(evt);
            }
        });
        quickMenu.add(quickCopyAll);

        quickPaste.setText("Paste");
        quickPaste.setMaximumSize(new java.awt.Dimension(100, 20));
        quickPaste.setMinimumSize(new java.awt.Dimension(107, 20));
        quickPaste.setPreferredSize(new java.awt.Dimension(107, 15));
        quickPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickPasteActionPerformed(evt);
            }
        });
        quickMenu.add(quickPaste);

        quickSwap.setText("Swap");
        quickSwap.setMaximumSize(new java.awt.Dimension(100, 20));
        quickSwap.setMinimumSize(new java.awt.Dimension(107, 20));
        quickSwap.setPreferredSize(new java.awt.Dimension(107, 15));
        quickSwap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickSwapActionPerformed(evt);
            }
        });
        quickMenu.add(quickSwap);

        quickClear.setText("Clear");
        quickClear.setMaximumSize(new java.awt.Dimension(100, 20));
        quickClear.setMinimumSize(new java.awt.Dimension(107, 20));
        quickClear.setPreferredSize(new java.awt.Dimension(107, 15));
        quickClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickClearActionPerformed(evt);
            }
        });
        quickMenu.add(quickClear);
        quickMenu.add(quickMenuS2);

        quickSelectAll.setText("Select All");
        quickSelectAll.setMaximumSize(new java.awt.Dimension(100, 20));
        quickSelectAll.setMinimumSize(new java.awt.Dimension(107, 20));
        quickSelectAll.setPreferredSize(new java.awt.Dimension(107, 15));
        quickSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickSelectAllActionPerformed(evt);
            }
        });
        quickMenu.add(quickSelectAll);

        replaceDialog.setTitle("Find and replace");
        replaceDialog.setAlwaysOnTop(true);
        replaceDialog.setMinimumSize(new java.awt.Dimension(440, 225));
        replaceDialog.setResizable(false);
        replaceDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                replaceDialogComponentShown(evt);
            }
        });
        replaceDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        replaceDFindNext.setText("Find next");
        replaceDFindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceDFindNextActionPerformed(evt);
            }
        });
        replaceDialog.getContentPane().add(replaceDFindNext, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 110, -1));

        replaceDFindPrev.setText("Find previeous");
        replaceDFindPrev.setEnabled(false);
        replaceDFindPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceDFindPrevActionPerformed(evt);
            }
        });
        replaceDialog.getContentPane().add(replaceDFindPrev, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 110, -1));

        replaceDReplace.setText("Replace");
        replaceDReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceDReplaceActionPerformed(evt);
            }
        });
        replaceDialog.getContentPane().add(replaceDReplace, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, 110, -1));

        replaceDReplaceAll.setText("Replace all");
        replaceDReplaceAll.setEnabled(false);
        replaceDialog.getContentPane().add(replaceDReplaceAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 110, -1));

        replaceDClose.setText("Close");
        replaceDClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceDCloseActionPerformed(evt);
            }
        });
        replaceDialog.getContentPane().add(replaceDClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, 110, -1));

        replaceDSearchLabel.setText("Search String");
        replaceDialog.getContentPane().add(replaceDSearchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 20));

        replaceDSearchCombo.setEditable(true);
        replaceDSearchCombo.setMaximumRowCount(10);
        replaceDialog.getContentPane().add(replaceDSearchCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 280, -1));

        replaceDReplaceLabel.setText("Replace with");
        replaceDialog.getContentPane().add(replaceDReplaceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 20));

        replaceDReplaceCombo.setEditable(true);
        replaceDReplaceCombo.setMaximumRowCount(10);
        replaceDialog.getContentPane().add(replaceDReplaceCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 280, -1));

        replaceDMatchWord.setText("Match whole word only");
        replaceDMatchWord.setEnabled(false);
        replaceDialog.getContentPane().add(replaceDMatchWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 170, 20));

        replaceDMatchCase.setText("Match case");
        replaceDMatchCase.setEnabled(false);
        replaceDialog.getContentPane().add(replaceDMatchCase, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 150, 20));

        replaceDRegex.setText("Regular expresion search");
        replaceDRegex.setEnabled(false);
        replaceDialog.getContentPane().add(replaceDRegex, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 180, 20));

        replaceDMatchWordStart.setText("Match begining of word only");
        replaceDMatchWordStart.setEnabled(false);
        replaceDialog.getContentPane().add(replaceDMatchWordStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 170, 20));

        replaceGotoFind.setForeground(new java.awt.Color(0, 0, 204));
        replaceGotoFind.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        replaceGotoFind.setText("Goto Find(ctrl+F)");
        replaceGotoFind.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        replaceGotoFind.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                replaceGotoFindMouseClicked(evt);
            }
        });
        replaceDialog.getContentPane().add(replaceGotoFind, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 100, 20));

        replaceDNothingFound.setForeground(new java.awt.Color(153, 0, 0));
        replaceDNothingFound.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        replaceDialog.getContentPane().add(replaceDNothingFound, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 140, 210, 20));

        findDialog.setTitle("Find String");
        findDialog.setAlwaysOnTop(true);
        findDialog.setMinimumSize(new java.awt.Dimension(440, 180));
        findDialog.setName("findDialog"); // NOI18N
        findDialog.setResizable(false);
        findDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                findDialogComponentShown(evt);
            }
        });
        findDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        findDFindNext.setText("Find next");
        findDFindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDFindNextActionPerformed(evt);
            }
        });
        findDialog.getContentPane().add(findDFindNext, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 110, -1));

        findDFindPrev.setText("Find previeous");
        findDFindPrev.setEnabled(false);
        findDFindPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDFindPrevActionPerformed(evt);
            }
        });
        findDialog.getContentPane().add(findDFindPrev, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 110, -1));

        findDClose.setText("Close");
        findDClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDCloseActionPerformed(evt);
            }
        });
        findDialog.getContentPane().add(findDClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, 110, -1));

        findDSearchLabel.setText("Search String");
        findDialog.getContentPane().add(findDSearchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 20));

        findDSearchCombo.setEditable(true);
        findDSearchCombo.setMaximumRowCount(10);
        findDialog.getContentPane().add(findDSearchCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 280, -1));

        findDMatchWord.setText("Match whole word only");
        findDMatchWord.setEnabled(false);
        findDialog.getContentPane().add(findDMatchWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 170, 20));

        findDMatchCase.setText("Match case");
        findDMatchCase.setEnabled(false);
        findDialog.getContentPane().add(findDMatchCase, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 150, 20));

        findDRegex.setText("Regular expresion search");
        findDRegex.setEnabled(false);
        findDialog.getContentPane().add(findDRegex, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 180, 20));

        findDMatchWordStart.setText("Match begining of word only");
        findDMatchWordStart.setEnabled(false);
        findDialog.getContentPane().add(findDMatchWordStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 200, 20));

        findGotoReplace.setForeground(new java.awt.Color(0, 0, 204));
        findGotoReplace.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        findGotoReplace.setText("Goto Replace(ctrl + H)");
        findGotoReplace.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        findGotoReplace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findGotoReplaceMouseClicked(evt);
            }
        });
        findDialog.getContentPane().add(findGotoReplace, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 130, 20));

        nothingFoundLabel.setForeground(new java.awt.Color(153, 0, 0));
        nothingFoundLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        findDialog.getContentPane().add(nothingFoundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 210, 20));

        aboutDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        aboutDialog.setTitle("About the author and this software..");
        aboutDialog.setMinimumSize(new java.awt.Dimension(615, 405));
        aboutDialog.setModal(true);
        aboutDialog.setResizable(false);
        aboutDialog.setType(java.awt.Window.Type.POPUP);
        aboutDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                aboutDialogComponentShown(evt);
            }
        });
        aboutDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        clickable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        clickable.setForeground(new java.awt.Color(0, 102, 102));
        clickable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clickable.setText("x");
        clickable.setMaximumSize(new java.awt.Dimension(30, 20));
        clickable.setMinimumSize(new java.awt.Dimension(30, 20));
        clickable.setPreferredSize(new java.awt.Dimension(30, 20));
        aboutDialog.getContentPane().add(clickable, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, -1, -1));

        aboutPane.setBackground(new java.awt.Color(0, 51, 51));
        aboutPane.setForeground(new java.awt.Color(204, 204, 204));
        aboutPane.setMaximumSize(new java.awt.Dimension(590, 350));
        aboutPane.setMinimumSize(new java.awt.Dimension(590, 350));
        aboutPane.setOpaque(true);
        aboutPane.setPreferredSize(new java.awt.Dimension(590, 350));

        aboutAuthorPanel.setBackground(new java.awt.Color(0, 51, 51));
        aboutAuthorPanel.setForeground(new java.awt.Color(204, 204, 204));
        aboutAuthorPanel.setLayout(new java.awt.CardLayout());

        aboutAuthorP.setBackground(new java.awt.Color(0, 51, 51));
        aboutAuthorP.setBorder(null);
        aboutAuthorP.setForeground(new java.awt.Color(204, 204, 204));
        aboutAuthorP.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        aboutAuthorP.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        aboutAuthorText.setEditable(false);
        aboutAuthorText.setBackground(new java.awt.Color(0, 51, 51));
        aboutAuthorText.setColumns(20);
        aboutAuthorText.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        aboutAuthorText.setForeground(new java.awt.Color(204, 204, 204));
        aboutAuthorText.setLineWrap(true);
        aboutAuthorText.setRows(5);
        aboutAuthorText.setWrapStyleWord(true);
        aboutAuthorText.setBorder(null);
        aboutAuthorText.setMargin(new java.awt.Insets(4, 4, 4, 4));
        aboutAuthorText.setMaximumSize(new java.awt.Dimension(3600, 3000));
        aboutAuthorText.setMinimumSize(new java.awt.Dimension(500, 300));
        aboutAuthorP.setViewportView(aboutAuthorText);

        aboutAuthorPanel.add(aboutAuthorP, "card3");

        aboutPane.addTab("About Author  ", aboutAuthorPanel);

        aboutSoftwarePanel.setBackground(new java.awt.Color(0, 51, 51));
        aboutSoftwarePanel.setForeground(new java.awt.Color(204, 204, 204));
        aboutSoftwarePanel.setLayout(new java.awt.CardLayout());

        aboutSoftwareP.setBackground(new java.awt.Color(0, 51, 51));
        aboutSoftwareP.setBorder(null);
        aboutSoftwareP.setForeground(new java.awt.Color(204, 204, 204));
        aboutSoftwareP.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        aboutSoftwareText.setEditable(false);
        aboutSoftwareText.setBackground(new java.awt.Color(0, 51, 51));
        aboutSoftwareText.setColumns(20);
        aboutSoftwareText.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        aboutSoftwareText.setForeground(new java.awt.Color(204, 204, 204));
        aboutSoftwareText.setLineWrap(true);
        aboutSoftwareText.setRows(5);
        aboutSoftwareText.setWrapStyleWord(true);
        aboutSoftwareText.setBorder(null);
        aboutSoftwareText.setMargin(new java.awt.Insets(4, 4, 4, 4));
        aboutSoftwareText.setMaximumSize(new java.awt.Dimension(3600, 3000));
        aboutSoftwareText.setMinimumSize(new java.awt.Dimension(500, 300));
        aboutSoftwareP.setViewportView(aboutSoftwareText);

        aboutSoftwarePanel.add(aboutSoftwareP, "card3");

        aboutPane.addTab("About Software  ", aboutSoftwarePanel);

        aboutDialog.getContentPane().add(aboutPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 590, 360));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Untitled document  |  BIGNotepad");
        setMinimumSize(new java.awt.Dimension(300, 99));
        setName("mainWindow"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        quickIconsPanel.setBackground(new java.awt.Color(204, 204, 204));
        quickIconsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        quickIconsPanel.setMaximumSize(new java.awt.Dimension(600, 24));
        quickIconsPanel.setMinimumSize(new java.awt.Dimension(600, 24));
        quickIconsPanel.setPreferredSize(new java.awt.Dimension(600, 24));
        quickIconsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        newFileIcon.setBackground(new java.awt.Color(230, 230, 230));
        newFileIcon.setIcon(new javax.swing.ImageIcon("E:\\#JABA\\Copy\\#JAVA\\#APP\\Big Text Editor\\TextEditor\\src\\Resources\\images\\newFile.png")); // NOI18N
        newFileIcon.setToolTipText("New");
        newFileIcon.setOpaque(true);
        newFileIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newFileIconMouseClicked(evt);
            }
        });
        quickIconsPanel.add(newFileIcon);

        separatorLabel.setBackground(new java.awt.Color(153, 153, 153));
        separatorLabel.setMaximumSize(new java.awt.Dimension(2, 20));
        separatorLabel.setMinimumSize(new java.awt.Dimension(2, 20));
        separatorLabel.setOpaque(true);
        separatorLabel.setPreferredSize(new java.awt.Dimension(2, 20));
        quickIconsPanel.add(separatorLabel);

        openFileIcon.setIcon(new javax.swing.ImageIcon("E:\\#JABA\\Copy\\#JAVA\\#APP\\Big Text Editor\\TextEditor\\src\\Resources\\images\\openFile.png")); // NOI18N
        openFileIcon.setToolTipText("Open");
        openFileIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openFileIconMouseClicked(evt);
            }
        });
        quickIconsPanel.add(openFileIcon);

        separatorLabel1.setBackground(new java.awt.Color(153, 153, 153));
        separatorLabel1.setMaximumSize(new java.awt.Dimension(2, 20));
        separatorLabel1.setMinimumSize(new java.awt.Dimension(2, 20));
        separatorLabel1.setOpaque(true);
        separatorLabel1.setPreferredSize(new java.awt.Dimension(2, 20));
        quickIconsPanel.add(separatorLabel1);

        saveFileIcon.setIcon(new javax.swing.ImageIcon("E:\\#JABA\\Copy\\#JAVA\\#APP\\Big Text Editor\\TextEditor\\src\\Resources\\images\\saveFile.png")); // NOI18N
        saveFileIcon.setToolTipText("Save");
        saveFileIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveFileIconMouseClicked(evt);
            }
        });
        quickIconsPanel.add(saveFileIcon);

        separatorLabel2.setBackground(new java.awt.Color(153, 153, 153));
        separatorLabel2.setMaximumSize(new java.awt.Dimension(2, 20));
        separatorLabel2.setMinimumSize(new java.awt.Dimension(2, 20));
        separatorLabel2.setOpaque(true);
        separatorLabel2.setPreferredSize(new java.awt.Dimension(2, 20));
        quickIconsPanel.add(separatorLabel2);

        findStringIcon.setIcon(new javax.swing.ImageIcon("E:\\#JABA\\Copy\\#JAVA\\#APP\\Big Text Editor\\TextEditor\\src\\Resources\\images\\findFile.png")); // NOI18N
        findStringIcon.setToolTipText("Search");
        findStringIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findStringIconMouseClicked(evt);
            }
        });
        quickIconsPanel.add(findStringIcon);

        separatorLabel3.setBackground(new java.awt.Color(153, 153, 153));
        separatorLabel3.setMaximumSize(new java.awt.Dimension(2, 20));
        separatorLabel3.setMinimumSize(new java.awt.Dimension(2, 20));
        separatorLabel3.setOpaque(true);
        separatorLabel3.setPreferredSize(new java.awt.Dimension(2, 20));
        quickIconsPanel.add(separatorLabel3);

        getContentPane().add(quickIconsPanel, java.awt.BorderLayout.NORTH);

        editorScrollPane.setBackground(new java.awt.Color(0, 51, 51));
        editorScrollPane.setBorder(null);
        editorScrollPane.setForeground(new java.awt.Color(204, 204, 204));
        editorScrollPane.setDoubleBuffered(true);
        editorScrollPane.setName("scroller"); // NOI18N
        editorScrollPane.setWheelScrollingEnabled(false);

        bigEdit.setBorder(null);
        bigEdit.setForeground(new java.awt.Color(51, 51, 51));
        bigEdit.setDoubleBuffered(true);
        bigEdit.setMaximumSize(new java.awt.Dimension(3600, 3000));
        bigEdit.setMinimumSize(new java.awt.Dimension(700, 500));
        bigEdit.setName("Edit1"); // NOI18N
        bigEdit.setPreferredSize(new java.awt.Dimension(700, 500));
        bigEdit.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                bigEditCaretUpdate(evt);
            }
        });
        bigEdit.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                bigEditMouseWheelMoved(evt);
            }
        });
        bigEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bigEditMouseClicked(evt);
            }
        });
        editorScrollPane.setViewportView(bigEdit);

        getContentPane().add(editorScrollPane, java.awt.BorderLayout.CENTER);

        mainStatusPanel.setAlignmentX(0.0F);
        mainStatusPanel.setAlignmentY(0.0F);
        mainStatusPanel.setMaximumSize(new java.awt.Dimension(600, 25));
        mainStatusPanel.setMinimumSize(new java.awt.Dimension(600, 25));
        mainStatusPanel.setPreferredSize(new java.awt.Dimension(600, 25));
        mainStatusPanel.setLayout(new java.awt.BorderLayout());

        lineColSelStatusPanel.setBackground(new java.awt.Color(204, 204, 204));
        lineColSelStatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lineColSelStatusPanel.setMaximumSize(new java.awt.Dimension(300, 25));
        lineColSelStatusPanel.setMinimumSize(new java.awt.Dimension(300, 25));
        lineColSelStatusPanel.setPreferredSize(new java.awt.Dimension(300, 25));
        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0);
        flowLayout2.setAlignOnBaseline(true);
        lineColSelStatusPanel.setLayout(flowLayout2);

        lineColSelStatusLabel.setBackground(new java.awt.Color(102, 102, 102));
        lineColSelStatusLabel.setText("Ln 1 : 1  |  Chars: 0  |  Sel: 0");
        lineColSelStatusLabel.setMaximumSize(new java.awt.Dimension(295, 20));
        lineColSelStatusLabel.setMinimumSize(new java.awt.Dimension(295, 20));
        lineColSelStatusLabel.setPreferredSize(new java.awt.Dimension(295, 20));
        lineColSelStatusPanel.add(lineColSelStatusLabel);

        mainStatusPanel.add(lineColSelStatusPanel, java.awt.BorderLayout.CENTER);

        encodingStatusPanel.setBackground(new java.awt.Color(204, 204, 204));
        encodingStatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        encodingStatusPanel.setMaximumSize(new java.awt.Dimension(100, 25));
        encodingStatusPanel.setMinimumSize(new java.awt.Dimension(100, 25));
        encodingStatusPanel.setPreferredSize(new java.awt.Dimension(100, 25));
        encodingStatusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        encodingStatusLabel.setBackground(new java.awt.Color(102, 102, 102));
        encodingStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        encodingStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        encodingStatusLabel.setText("ENCODING");
        encodingStatusLabel.setPreferredSize(new java.awt.Dimension(95, 20));
        encodingStatusPanel.add(encodingStatusLabel);

        mainStatusPanel.add(encodingStatusPanel, java.awt.BorderLayout.WEST);

        getContentPane().add(mainStatusPanel, java.awt.BorderLayout.SOUTH);

        fileMenu.setText("File");

        fileNewMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        fileNewMenuItem.setText("New..");
        fileNewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNewMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileNewMenuItem);

        fileNewEmptyWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileNewEmptyWindow.setText("New empty window");
        fileNewEmptyWindow.setEnabled(false);
        fileNewEmptyWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNewEmptyWindowActionPerformed(evt);
            }
        });
        fileMenu.add(fileNewEmptyWindow);

        fileOpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fileOpenMenuItem.setText("Open..");
        fileOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileOpenMenuItem);
        fileMenu.add(fileSeparator1);

        fileSaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileSaveMenuItem.setText("Save");
        fileSaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileSaveMenuItem);

        fileSaveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileSaveAsMenuItem.setText("Save as..");
        fileSaveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileSaveAsMenuItem);

        fileSetReadOnlyMenuItem.setText("Read only");
        fileSetReadOnlyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSetReadOnlyMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileSetReadOnlyMenuItem);
        fileMenu.add(fileSeparator2);

        jMenu2.setText("File encoding");

        fileEncodingANSI.setText("ANSI");
        fileEncodingANSI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileEncodingANSIActionPerformed(evt);
            }
        });
        jMenu2.add(fileEncodingANSI);

        fileEncodingUnicode.setText("Unicode");
        fileEncodingUnicode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileEncodingUnicodeActionPerformed(evt);
            }
        });
        jMenu2.add(fileEncodingUnicode);

        fileEncodingBE.setText("Unicode Big Endian");
        fileEncodingBE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileEncodingBEActionPerformed(evt);
            }
        });
        jMenu2.add(fileEncodingBE);

        fileEncodingUTF8.setText("UTF-8");
        fileEncodingUTF8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileEncodingUTF8ActionPerformed(evt);
            }
        });
        jMenu2.add(fileEncodingUTF8);

        fileEncodingLatin1.setText("ISO-LATIN-1");
        fileEncodingLatin1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileEncodingLatin1ActionPerformed(evt);
            }
        });
        jMenu2.add(fileEncodingLatin1);

        fileMenu.add(jMenu2);
        fileMenu.add(fileSeparator3);

        filePrintMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        filePrintMenuItem.setText("Print..");
        filePrintMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePrintMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(filePrintMenuItem);
        fileMenu.add(fileSeparator4);

        jMenuItem8.setText("File properties");
        jMenuItem8.setEnabled(false);
        fileMenu.add(jMenuItem8);
        fileMenu.add(fileSeparator5);

        fileRecentMenu.setText("Recent files");
        fileMenu.add(fileRecentMenu);
        fileMenu.add(fileSeparator6);

        fileExitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        fileExitMenuItem.setText("Exit");
        fileExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileExitMenuItem);

        mainMenu.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                editMenuMenuSelected(evt);
            }
        });

        editUndoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        editUndoMenuItem.setText("Undo");
        editUndoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUndoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editUndoMenuItem);

        editRedoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        editRedoMenuItem.setText("Redo");
        editRedoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRedoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editRedoMenuItem);
        editMenu.add(jSeparator1);

        editCutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        editCutMenuItem.setText("Cut");
        editCutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editCutMenuItem);

        editCopyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        editCopyMenuItem.setText("Copy");
        editCopyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCopyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editCopyMenuItem);

        editPasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        editPasteMenuItem.setText("Paste");
        editPasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editPasteMenuItem);

        editSelectAllMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        editSelectAllMenuItem.setText("Select all");
        editSelectAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSelectAllMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editSelectAllMenuItem);

        editClearClipboardMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PERIOD, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        editClearClipboardMenuItem.setText("Clear clipboard");
        editClearClipboardMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editClearClipboardMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editClearClipboardMenuItem);
        editMenu.add(jSeparator5);

        findMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        findMenuItem.setText("Find String..");
        findMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(findMenuItem);

        replaceMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        replaceMenuItem.setText("Replace String..");
        replaceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(replaceMenuItem);
        editMenu.add(jSeparator10);

        editInsertMenu.setText("Insert..");

        insertShortDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        insertShortDate.setText("Date (short: Thu 17.08.2015 - 05:37:37)");
        insertShortDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertShortDateActionPerformed(evt);
            }
        });
        editInsertMenu.add(insertShortDate);

        insertLongDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        insertLongDate.setText("Date (long: Thu Aug 27 17:37:37 GMT+02:00 2015");
        insertLongDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertLongDateActionPerformed(evt);
            }
        });
        editInsertMenu.add(insertLongDate);

        editMenu.add(editInsertMenu);
        editMenu.add(jSeparator2);

        editConvertMenu.setText("Convert");

        editConvToLowerCase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, java.awt.event.InputEvent.SHIFT_MASK));
        editConvToLowerCase.setText("lowercase");
        editConvToLowerCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editConvToLowerCaseActionPerformed(evt);
            }
        });
        editConvertMenu.add(editConvToLowerCase);

        editConvToUpperCase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.SHIFT_MASK));
        editConvToUpperCase.setText("UPPERCASE");
        editConvToUpperCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editConvToUpperCaseActionPerformed(evt);
            }
        });
        editConvertMenu.add(editConvToUpperCase);

        editConvInvertCase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.SHIFT_MASK));
        editConvInvertCase.setText("iNVERT cASE");
        editConvInvertCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editConvInvertCaseActionPerformed(evt);
            }
        });
        editConvertMenu.add(editConvInvertCase);

        editMenu.add(editConvertMenu);

        mainMenu.add(editMenu);

        viewMenu.setText("View");

        viewLongLineMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        viewLongLineMenuItem.setText("Long line marker");
        viewLongLineMenuItem.setEnabled(false);
        viewLongLineMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLongLineMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewLongLineMenuItem);

        viewWrapMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        viewWrapMenuItem.setText("Word wrap");
        viewWrapMenuItem.setEnabled(false);
        viewWrapMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewWrapMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewWrapMenuItem);

        viewDefaultFont.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, java.awt.event.InputEvent.ALT_MASK));
        viewDefaultFont.setText("Default Font..");
        viewDefaultFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDefaultFontActionPerformed(evt);
            }
        });
        viewMenu.add(viewDefaultFont);
        viewMenu.add(jSeparator3);

        viewQuickMMenuItem.setText("View quick menu");
        viewQuickMMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewQuickMMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewQuickMMenuItem);

        viewStatusBarMenuItem.setText("View status-bar");
        viewStatusBarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStatusBarMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewStatusBarMenuItem);

        displayLineNumMenuItem.setText("Line numbers");
        displayLineNumMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayLineNumMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(displayLineNumMenuItem);

        viewThemeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        viewThemeMenuItem.setText("Select color theme..");
        viewThemeMenuItem.setEnabled(false);
        viewThemeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewThemeMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewThemeMenuItem);

        viewResetZoomMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SLASH, java.awt.event.InputEvent.CTRL_MASK));
        viewResetZoomMenuItem.setText("Reset zoom");
        viewResetZoomMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResetZoomMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewResetZoomMenuItem);

        mainMenu.add(viewMenu);

        settingsMenu.setText("Settings");

        settAlwaysOnTopMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        settAlwaysOnTopMenuItem.setText("Always on top");
        settAlwaysOnTopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settAlwaysOnTopMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(settAlwaysOnTopMenuItem);

        setMinToTrayMenuItem.setText("Minimize to tray");
        setMinToTrayMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMinToTrayMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(setMinToTrayMenuItem);

        settingsWinSizePosition.setText("Remember window size/position");
        settingsWinSizePosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsWinSizePositionActionPerformed(evt);
            }
        });
        settingsMenu.add(settingsWinSizePosition);

        settRecentFilesMenuItem.setText("Remember recent files");
        settRecentFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settRecentFilesMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(settRecentFilesMenuItem);

        settRecentSearchMenuItem.setText("Remember recent searches");
        settRecentSearchMenuItem.setEnabled(false);
        settRecentSearchMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settRecentSearchMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(settRecentSearchMenuItem);
        settingsMenu.add(jSeparator6);

        jMenu1.setText("Window title display");

        winTitleDisplayMode0.setText("File name only");
        winTitleDisplayMode0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winTitleDisplayMode0ActionPerformed(evt);
            }
        });
        jMenu1.add(winTitleDisplayMode0);

        winTitleDisplayMode1.setText("File name and Directory");
        winTitleDisplayMode1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winTitleDisplayMode1ActionPerformed(evt);
            }
        });
        jMenu1.add(winTitleDisplayMode1);

        winTitleDisplayMode2.setText("Full path");
        winTitleDisplayMode2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winTitleDisplayMode2ActionPerformed(evt);
            }
        });
        jMenu1.add(winTitleDisplayMode2);

        settingsMenu.add(jMenu1);

        settSaveOnExitMenuItem.setText("Save settings on exit");
        settSaveOnExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settSaveOnExitMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(settSaveOnExitMenuItem);

        settSaveNowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        settSaveNowMenuItem.setText("Save settings now..");
        settSaveNowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settSaveNowMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(settSaveNowMenuItem);
        settingsMenu.add(jSeparator4);

        settingsResetAll.setText("Reset all preferences");
        settingsResetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsResetAllActionPerformed(evt);
            }
        });
        settingsMenu.add(settingsResetAll);

        mainMenu.add(settingsMenu);

        helpMenu.setText("Help");

        helpTopics.setText("Help topics..");
        helpTopics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpTopicsActionPerformed(evt);
            }
        });
        helpMenu.add(helpTopics);

        aboutAuthorMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.SHIFT_MASK));
        aboutAuthorMenuItem.setText("About..");
        aboutAuthorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutAuthorMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutAuthorMenuItem);

        mainMenu.add(helpMenu);

        setJMenuBar(mainMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExitMenuItemActionPerformed
        if (askToSave) {
            int status = SaveFile.valueOf(this).saveConfirmation();
            if (status == 1) {
                exit(1);
            }
        } else {
            exit(0);
        }
    }//GEN-LAST:event_fileExitMenuItemActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void replaceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceMenuItemActionPerformed
        replaceDialog.setVisible(true);
    }//GEN-LAST:event_replaceMenuItemActionPerformed

    private void replaceDCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceDCloseActionPerformed
        replaceDialog.dispose();
    }//GEN-LAST:event_replaceDCloseActionPerformed

    private void findDCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDCloseActionPerformed
        findDialog.dispose();
    }//GEN-LAST:event_findDCloseActionPerformed

    private void replaceGotoFindMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_replaceGotoFindMouseClicked
        replaceDialog.dispose();
        if (replaceDSearchCombo.getSelectedItem() != null) {
            // add to replace combo
            findDSearchCombo.addItem(
                    replaceDSearchCombo.getSelectedItem());
            // set selected item in replace combo
            findDSearchCombo.setSelectedItem(
                    replaceDSearchCombo.getSelectedItem());
        }
        findDialog.setVisible(true);
    }//GEN-LAST:event_replaceGotoFindMouseClicked

    private void findGotoReplaceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findGotoReplaceMouseClicked
        findDialog.dispose();
        if (findDSearchCombo.getSelectedItem() != null) {
            // add to find combo
            replaceDSearchCombo.addItem(
                    findDSearchCombo.getSelectedItem());
            // set selected item in find combo
            replaceDSearchCombo.setSelectedItem(
                    findDSearchCombo.getSelectedItem());
        }
        replaceDialog.setVisible(true);
    }//GEN-LAST:event_findGotoReplaceMouseClicked

    private void findMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMenuItemActionPerformed
        findDialog.setVisible(true);
    }//GEN-LAST:event_findMenuItemActionPerformed

    private void fileNewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNewMenuItemActionPerformed
        if (askToSave) {
            int status = SaveFile.valueOf(this).saveConfirmation();
            if (status == -1 | status == 2) {
                JOptionPane.showConfirmDialog(this,
                        "Error writing file.",
                        "File not saved",
                        JOptionPane.PLAIN_MESSAGE);
            } else {
                newBlankDocument();
            }
        } else {
            newBlankDocument();
        }
    }//GEN-LAST:event_fileNewMenuItemActionPerformed

    private void editConvToLowerCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editConvToLowerCaseActionPerformed
        convertor("low");
    }//GEN-LAST:event_editConvToLowerCaseActionPerformed

    private void editConvToUpperCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editConvToUpperCaseActionPerformed
        convertor("UP");
    }//GEN-LAST:event_editConvToUpperCaseActionPerformed

    private void editConvInvertCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editConvInvertCaseActionPerformed
        convertor("invert");
    }//GEN-LAST:event_editConvInvertCaseActionPerformed

    private void editUndoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUndoMenuItemActionPerformed
        try {
            undoManager.undo();
            updateUndoMenuItems();
        } catch (CannotUndoException cue) {
            askToSave = undoManager.canUndo();
            TitleDisplayMode.valueOf(this).setWindowTitleDisplay(windowTitleDisplayMode);
            System.err.println("CannotUndo ex: " + cue);
        }
    }//GEN-LAST:event_editUndoMenuItemActionPerformed

    private void editRedoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRedoMenuItemActionPerformed
        try {
            undoManager.redo();
            updateUndoMenuItems();
        } catch (CannotRedoException cre) {
            System.err.println(cre);
        }
    }//GEN-LAST:event_editRedoMenuItemActionPerformed

    private void editSelectAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSelectAllMenuItemActionPerformed
        bigEdit.selectAll();
    }//GEN-LAST:event_editSelectAllMenuItemActionPerformed

    private void aboutAuthorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutAuthorMenuItemActionPerformed
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutAuthorMenuItemActionPerformed

    private void findDFindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDFindNextActionPerformed
        if (findDSearchCombo.getSelectedItem() != null) {
            findDSearchCombo.insertItemAt(findDSearchCombo.getSelectedItem(), 0);
            findNext(findDSearchCombo);
        }
    }//GEN-LAST:event_findDFindNextActionPerformed

    private void findDFindPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDFindPrevActionPerformed
        // will be integrated soon!
    }//GEN-LAST:event_findDFindPrevActionPerformed

    private void replaceDFindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceDFindNextActionPerformed
        if (replaceDSearchCombo.getSelectedItem() != null) {
            replaceDSearchCombo.insertItemAt(replaceDSearchCombo.getSelectedItem(), 0);
            findNext(replaceDSearchCombo);
        }
    }//GEN-LAST:event_replaceDFindNextActionPerformed

    private void replaceDFindPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceDFindPrevActionPerformed
        // will be integrated soon!
    }//GEN-LAST:event_replaceDFindPrevActionPerformed

    private void fileSaveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveAsMenuItemActionPerformed
        SaveFile.valueOf(this).fileSaveAs();
    }//GEN-LAST:event_fileSaveAsMenuItemActionPerformed

    private void fileSaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveMenuItemActionPerformed
        if (!fileIsReadOnly & !bigEdit.getText().equals("")) {
            SaveFile.valueOf(this).saveCurrentFile();
        } else {
            int select = JOptionPane.showConfirmDialog(this,
                    "This file is read-only or empty!\nSave with a different name?",
                    "File not saved",
                    JOptionPane.YES_NO_OPTION);
            if (select == JOptionPane.YES_OPTION) {
                SaveFile.valueOf(this).fileSaveAs();
            }
        }
    }//GEN-LAST:event_fileSaveMenuItemActionPerformed

    private void fileOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenMenuItemActionPerformed
        OpenFile.valueOf(this).fileOpenNew();
    }//GEN-LAST:event_fileOpenMenuItemActionPerformed

    private void newFileIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newFileIconMouseClicked
        OpenFile.valueOf(this).fileOpenNew();
    }//GEN-LAST:event_newFileIconMouseClicked

    private void openFileIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openFileIconMouseClicked
        OpenFile.valueOf(this).fileOpenNew();
    }//GEN-LAST:event_openFileIconMouseClicked

    private void saveFileIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveFileIconMouseClicked
        SaveFile.valueOf(this).saveCurrentFile();
    }//GEN-LAST:event_saveFileIconMouseClicked

    private void findStringIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findStringIconMouseClicked
        findDialog.setVisible(true);
    }//GEN-LAST:event_findStringIconMouseClicked

    private void settSaveNowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settSaveNowMenuItemActionPerformed
        int temp = SaveCurrentSettings.valueOf(this).saveSettings();
        if (temp == 0) {
            JOptionPane.showConfirmDialog(this,
                    "Settings were saved successfully",
                    "BIGNotepad settings",
                    JOptionPane.PLAIN_MESSAGE);
        } else {
            JOptionPane.showConfirmDialog(this,
                    "Settings were NOT saved",
                    "BIGNotepad settings",
                    JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_settSaveNowMenuItemActionPerformed

    private void viewResetZoomMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResetZoomMenuItemActionPerformed
        // default zoom
        zoomFactor = 100;
    }//GEN-LAST:event_viewResetZoomMenuItemActionPerformed

    private void viewDefaultFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDefaultFontActionPerformed
        JFontChooser jfc = new JFontChooser();
        jfc.createDialog(this).setVisible(true);
        bigEdit.setFont(jfc.getSelectedFont());
    }//GEN-LAST:event_viewDefaultFontActionPerformed

    private void viewWrapMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewWrapMenuItemActionPerformed
        wordWrap = viewWrapMenuItem.isSelected();
        WrapText wrapper = new WrapText(wordWrap);
        wrapper.getScrollableTracksViewportWidth();
    }//GEN-LAST:event_viewWrapMenuItemActionPerformed

    private void editClearClipboardMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editClearClipboardMenuItemActionPerformed
        StringSelection stringSelection = new StringSelection("");
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
                stringSelection, null);
    }//GEN-LAST:event_editClearClipboardMenuItemActionPerformed

    private void editMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_editMenuMenuSelected
        // toggle selected on Copy, Cut and Convert menu
        if (bigEdit.getSelectedText() == null) {
            editMenuAccess(false);
        } else {
            editMenuAccess(true);
        }
        // check if there is anything on cliboard to Paste
        String clipboard = "";
        try {
            clipboard = Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor).toString();
        } catch (UnsupportedFlavorException | IOException ex) {
            System.err.println("Nothig on the clipboard. " + ex);
        }
        if (clipboard.equals("")) {
            editPasteMenuItem.setEnabled(false);
        } else {
            editPasteMenuItem.setEnabled(true);
        }
    }//GEN-LAST:event_editMenuMenuSelected

    private void editPasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPasteMenuItemActionPerformed
        bigEdit.paste();
    }//GEN-LAST:event_editPasteMenuItemActionPerformed

    private void editCopyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCopyMenuItemActionPerformed
        bigEdit.copy();
    }//GEN-LAST:event_editCopyMenuItemActionPerformed

    private void editCutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCutMenuItemActionPerformed
        bigEdit.cut();
    }//GEN-LAST:event_editCutMenuItemActionPerformed

    private void viewThemeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewThemeMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_viewThemeMenuItemActionPerformed

    private void settAlwaysOnTopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settAlwaysOnTopMenuItemActionPerformed
        if (settAlwaysOnTopMenuItem.isSelected()) {
            alwaysOnTop = true;
            this.setAlwaysOnTop(true);
        } else {
            alwaysOnTop = false;
            this.setAlwaysOnTop(false);
        }
    }//GEN-LAST:event_settAlwaysOnTopMenuItemActionPerformed

    private void setMinToTrayMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMinToTrayMenuItemActionPerformed
        if (setMinToTrayMenuItem.isSelected()) {
            MinimizeToSystemTray.valueOf(this).sysTrayMenu();
            minimizeToTray = true;
        } else {
            minimizeToTray = false;
        }
    }//GEN-LAST:event_setMinToTrayMenuItemActionPerformed

    private void fileEncodingANSIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileEncodingANSIActionPerformed
        settEncoding("CP1252");
    }//GEN-LAST:event_fileEncodingANSIActionPerformed

    private void fileEncodingUnicodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileEncodingUnicodeActionPerformed
        settEncoding("UTF-8");
    }//GEN-LAST:event_fileEncodingUnicodeActionPerformed

    private void fileEncodingBEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileEncodingBEActionPerformed
        settEncoding("UTF-16BE");
    }//GEN-LAST:event_fileEncodingBEActionPerformed

    private void fileEncodingUTF8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileEncodingUTF8ActionPerformed
        settEncoding("UTF-8");
    }//GEN-LAST:event_fileEncodingUTF8ActionPerformed

    private void fileEncodingLatin1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileEncodingLatin1ActionPerformed
        settEncoding("ISO-8859-1");
    }//GEN-LAST:event_fileEncodingLatin1ActionPerformed

    private void fileNewEmptyWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNewEmptyWindowActionPerformed
        // still working on this..
    }//GEN-LAST:event_fileNewEmptyWindowActionPerformed

    private void settingsWinSizePositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsWinSizePositionActionPerformed
        rememeberWinSize = settingsWinSizePosition.isSelected();
    }//GEN-LAST:event_settingsWinSizePositionActionPerformed

    private void settingsResetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsResetAllActionPerformed
        Config cfg = new Config(defaultTempFolder);
        int status = cfg.failSafe();
        if (status == 0) {
            JOptionPane.showConfirmDialog(this,
                    "Settings set to default.",
                    "BIGNotepad settings",
                    JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_settingsResetAllActionPerformed

    private void viewStatusBarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewStatusBarMenuItemActionPerformed
        if (viewStatusBarMenuItem.isSelected()) {
            mainStatusPanel.setVisible(true);
            displayStatusBar = true;
        } else {
            mainStatusPanel.setVisible(false);
            displayStatusBar = false;
        }
    }//GEN-LAST:event_viewStatusBarMenuItemActionPerformed

    private void viewQuickMMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewQuickMMenuItemActionPerformed
        if (viewQuickMMenuItem.isSelected()) {
            quickIconsPanel.setVisible(true);
            displayQuickMenu = true;
        } else {
            quickIconsPanel.setVisible(false);
            displayQuickMenu = false;
        }
    }//GEN-LAST:event_viewQuickMMenuItemActionPerformed

    private void insertShortDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertShortDateActionPerformed
        Date date = new Date();
        SimpleDateFormat sdf
                = new SimpleDateFormat("E dd.MM.yyyy '-' hh:mm:ss");
        try {
            document.insertString(bigEdit.getCaretPosition(), sdf.format(date), null);
        } catch (BadLocationException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_insertShortDateActionPerformed

    private void insertLongDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertLongDateActionPerformed
        Date time = new Date(System.currentTimeMillis());
        try {
            document.insertString(bigEdit.getCaretPosition(), time.toString(), null);
        } catch (BadLocationException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_insertLongDateActionPerformed

    private void bigEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bigEditMouseClicked

        // pop-up right-click menu
        if (evt.getButton() == 3) {
            quickMenu.setLocation(evt.getXOnScreen(), evt.getYOnScreen());
            // quick menu items toggle enabled/disabled
            quickUndo.setEnabled(undoManager.canUndo());
            quickRedo.setEnabled(undoManager.canRedo());
            quickCut.setEnabled(bigEdit.getSelectedText() != null);
            quickCopy.setEnabled(bigEdit.getSelectedText() != null);
            quickSelectAll.setEnabled(bigEdit.getText().length() != 0);
            String data = null;
            try {
                // get readable text from clipboard (if any)
                data = (String) Toolkit.getDefaultToolkit()
                        .getSystemClipboard().getData(DataFlavor.stringFlavor);
            } catch (UnsupportedFlavorException | IOException ex) {
                System.err.println("Clipboard error. " + ex);
            }
            quickPaste.setEnabled(data != null);
            quickSwap.setEnabled(data != null & bigEdit.getSelectedText() != null);
            // make it visible
            quickMenu.setVisible(true);
        } else if (evt.getButton() == 1) {

            // if click count equals 3 selects whole line
            if (evt.getClickCount() == 3) {
                int position = bigEdit.getCaretPosition();
                int length = document.getLength();
                String temp = System.getProperty("line.separator");
                for (int i = position; i > 0; i--) {
                    try {
                        if (bigEdit.getText().substring(i, i + 1).equals(temp)) {
                            bigEdit.setCaretPosition(i);
                            break;
                        }
                    } catch (StringIndexOutOfBoundsException e) {
                        System.err.println(e);
                    }
                }
                for (int i = position; i < length; i++) {
                    if (bigEdit.getText().substring(i, i + 1).equals(temp)) {
                        bigEdit.moveCaretPosition(i);
                        break;
                    }
                }
            } else if (evt.getClickCount() == 4) {
                bigEdit.selectAll();
            }
        }
    }//GEN-LAST:event_bigEditMouseClicked

    private void quickUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickUndoActionPerformed
        try {
            undoManager.undo();
            updateUndoMenuItems();
        } catch (CannotUndoException cue) {
            askToSave = undoManager.canUndo();
            TitleDisplayMode.valueOf(this).setWindowTitleDisplay(windowTitleDisplayMode);
            System.err.println("CannotUndo ex: " + cue);
        }
    }//GEN-LAST:event_quickUndoActionPerformed

    private void quickRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickRedoActionPerformed
        try {
            undoManager.redo();
            updateUndoMenuItems();
        } catch (CannotRedoException cre) {
            System.err.println(cre);
        }
    }//GEN-LAST:event_quickRedoActionPerformed

    private void quickCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickCutActionPerformed
        bigEdit.cut();
    }//GEN-LAST:event_quickCutActionPerformed

    private void quickCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickCopyActionPerformed
        bigEdit.copy();
    }//GEN-LAST:event_quickCopyActionPerformed

    private void quickCopyAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickCopyAllActionPerformed
        bigEdit.selectAll();
        bigEdit.copy();
    }//GEN-LAST:event_quickCopyAllActionPerformed

    private void quickPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickPasteActionPerformed
        bigEdit.paste();
    }//GEN-LAST:event_quickPasteActionPerformed

    private void quickSwapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickSwapActionPerformed
        // swap selected text with existing text in clipboard, if any
        String selection = bigEdit.getSelectedText();
        String data = "";
        try {
            // get readable text from clipboard
            data = (String) Toolkit.getDefaultToolkit()
                    .getSystemClipboard().getData(DataFlavor.stringFlavor);
        } catch (UnsupportedFlavorException | IOException ex) {
            System.err.println("Clipboard error. " + ex);
        }
        // place selected text to clipboard
        StringSelection stringSelection = new StringSelection(selection);
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, null);
        // replace selection with text on the clipboard
        bigEdit.replaceSelection(data);
    }//GEN-LAST:event_quickSwapActionPerformed

    private void quickClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickClearActionPerformed
        bigEdit.setText("");
    }//GEN-LAST:event_quickClearActionPerformed

    private void quickSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickSelectAllActionPerformed
        bigEdit.selectAll();
    }//GEN-LAST:event_quickSelectAllActionPerformed

    private void bigEditMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_bigEditMouseWheelMoved
        // scrolling one way or another AND zoom
        JScrollBar vBar = editorScrollPane.getVerticalScrollBar();
        JScrollBar hBar = editorScrollPane.getHorizontalScrollBar();
        Scroller scr = new Scroller(evt);
        if ((InputEvent.CTRL_DOWN_MASK & InputEvent.SHIFT_DOWN_MASK) == 0) {
            vBar.setValue(scr.scrollBar(vBar));
        } else if (!wordWrap & ((evt.getModifiersEx()
                & InputEvent.SHIFT_DOWN_MASK) != 0)) {
            hBar.setValue(scr.scrollBar(hBar));

            // scale text inside edit area (ZOOM)                               2DO!
        } else if ((evt.getModifiersEx() & InputEvent.CTRL_DOWN_MASK) != 0) {

            // if wheel moves down(towards the user) scale up
            if (evt.getWheelRotation() < 0) {
                Zoom z = new Zoom(bigEdit, 1);
                z.repaint();
                System.out.println("makes text bigger");

                // if wheel moves up(away from the user) scale down
            } else if (evt.getWheelRotation() > 0) {
                Zoom z = new Zoom(bigEdit, 0);
                z.repaint();
                System.out.println("makes text smaller");
            }
        }
    }//GEN-LAST:event_bigEditMouseWheelMoved

    private void replaceDialogComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_replaceDialogComponentShown
        findDialog.dispose();
        replaceDialog.setLocationRelativeTo(this);
        String noStringSelected = "";
        //if there is selected text, will add that to search text field
        if (bigEdit.getSelectedText() != null) {
            String word = bigEdit.getSelectedText();
            replaceDSearchCombo.addItem(word);
            replaceDSearchCombo.setSelectedItem(word);
        } else {
            replaceDSearchCombo.setSelectedItem(noStringSelected);
        }
    }//GEN-LAST:event_replaceDialogComponentShown

    private void findDialogComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_findDialogComponentShown
        replaceDialog.dispose();
        findDialog.setLocationRelativeTo(this);
        String noStringSelected = "";
        //if there is selected text, will add that to search text field
        if (bigEdit.getSelectedText() != null) {
            String word = bigEdit.getSelectedText();
            findDSearchCombo.addItem(word);
            findDSearchCombo.setSelectedItem(word);
        } else {
            replaceDSearchCombo.setSelectedItem(noStringSelected);
        }
    }//GEN-LAST:event_findDialogComponentShown

    private void aboutDialogComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_aboutDialogComponentShown
        // retrieve about info only the first time you open the AboutDialog
        if (aboutAuthorText.getText().length() == 0) {
            AboutDialog.valueOf(this).about();
        }
    }//GEN-LAST:event_aboutDialogComponentShown

    private void filePrintMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePrintMenuItemActionPerformed
        try {
            bigEdit.print();
        } catch (PrinterException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_filePrintMenuItemActionPerformed

    private void fileSetReadOnlyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSetReadOnlyMenuItemActionPerformed
        if (currentlyOpenedFile != null) {
            if (fileSetReadOnlyMenuItem.isSelected()) {
                currentlyOpenedFile.setWritable(false);
                fileIsReadOnly = true;
                // set title font to ITALIC
            } else {
                currentlyOpenedFile.setWritable(true);
                fileIsReadOnly = false;
                // revert title font to PLAIN
            }
        }
    }//GEN-LAST:event_fileSetReadOnlyMenuItemActionPerformed

    private void winTitleDisplayMode2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_winTitleDisplayMode2ActionPerformed
        // 2 = full path
        windowTitleDisplayMode = 2;
        TitleDisplayMode.valueOf(this).setWindowTitleDisplay(2);
    }//GEN-LAST:event_winTitleDisplayMode2ActionPerformed

    private void winTitleDisplayMode1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_winTitleDisplayMode1ActionPerformed
        // 1 = fileName and parent directory
        windowTitleDisplayMode = 1;
        TitleDisplayMode.valueOf(this).setWindowTitleDisplay(1);
    }//GEN-LAST:event_winTitleDisplayMode1ActionPerformed

    private void winTitleDisplayMode0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_winTitleDisplayMode0ActionPerformed
        // 0 = fileName (default)
        windowTitleDisplayMode = 0;
        TitleDisplayMode.valueOf(this).setWindowTitleDisplay(0);
    }//GEN-LAST:event_winTitleDisplayMode0ActionPerformed

    private void displayLineNumMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayLineNumMenuItemActionPerformed
        lineNumbers = new LineNumbers(editorScrollPane, bigEdit);
        // toggle line numbers 'panel'
        if (displayLineNumMenuItem.isSelected()) {
            displayLineNumbers = true;
            editorScrollPane.setRowHeaderView(lineNumbers);
        } else {
            displayLineNumbers = false;
            editorScrollPane.setRowHeaderView(null);
        }
    }//GEN-LAST:event_displayLineNumMenuItemActionPerformed

    private void viewLongLineMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLongLineMenuItemActionPerformed
        displayLongLineMarker = viewLongLineMenuItem.isSelected();
//        LongLineMarker llm = new LongLineMarker(bigEdit);
//        llm.drawLongLineMarker();
    }//GEN-LAST:event_viewLongLineMenuItemActionPerformed

    private void settRecentFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settRecentFilesMenuItemActionPerformed
        rememberRecentFiles = settRecentFilesMenuItem.isSelected();
    }//GEN-LAST:event_settRecentFilesMenuItemActionPerformed

    private void settSaveOnExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settSaveOnExitMenuItemActionPerformed
        saveSettingsOnExit = settSaveOnExitMenuItem.isSelected();
    }//GEN-LAST:event_settSaveOnExitMenuItemActionPerformed

    private void settRecentSearchMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settRecentSearchMenuItemActionPerformed
        rememberRecentSearches = settRecentSearchMenuItem.isSelected();
    }//GEN-LAST:event_settRecentSearchMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void bigEditCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_bigEditCaretUpdate
//        int lineCount = StatusBarUpdate.lineCounter(bigEdit);
//        int cursorPosition = evt.getDot();
//
//        int selectedText = 0;
//        if (bigEdit.getSelectedText() != null) {
//            selectedText = bigEdit.getSelectedText().length();
//        }
//        int lineNumber = StatusBarUpdate.getCurrentLineNumber(bigEdit, cursorPosition) + 1;
//        int characters = document.getLength();
//
//        // line offset is x of ~72 characters that enter in the print page (m)
//        lineColSelStatusLabel.setText("Ln " + lineNumber + " : " + lineCount
//                + "  |  Chars: " + characters + "  |  Sel : " + selectedText);
    }//GEN-LAST:event_bigEditCaretUpdate

    private void helpTopicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpTopicsActionPerformed
        Icon msgIcon = SetBigIcons.getter(this).bigIcon("/Resources/images/notepad.png");
        if (msgIcon != null) {
            JOptionPane.showMessageDialog(this,
                    "Unfortunately, the disabled menu items are not available at the moment\n"
                    + "But they will be brought to life very soon!", "BIGNotepad october 2015",
                    JOptionPane.PLAIN_MESSAGE, msgIcon);
        } else {
            JOptionPane.showConfirmDialog(null, "Image not found\n"
                    + msgIcon, "BIGNotepad message",
                    JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_helpTopicsActionPerformed

    private void replaceDReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceDReplaceActionPerformed
        replaceFeedback();
        findNext(replaceDSearchCombo);
    }//GEN-LAST:event_replaceDReplaceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info
                    : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BIGNotepad.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            BIGNotepad.getInstance().setVisible(true);
        });

    }

    public void findNext(JComboBox box) {
        if (box.getSelectedItem() != null) {
            String toFind = box.getItemAt(0).toString();
            int currentSearchLocation = bigEdit.getCaretPosition();
            try {
                for (int index = currentSearchLocation; index + toFind.length()
                        < document.getLength(); index++) {
                    String match = document.getText(index, toFind.length());
                    // find string IGNORE case
                    if (toFind.equalsIgnoreCase(match)) {
                        // tried to avoid repeating code, so call this method
                        findFeedback(index, toFind.length());
                        break;
                        // find string MATCH case
                    }
                    if (index == document.getLength()) {
                        JOptionPane.showMessageDialog(this, "EOF reached");
                    }
                    // add here other checkbox to validate
                }
            } catch (BadLocationException ex) {
                System.err.println(ex);
            }
        }
    }

    public void findFeedback(int location, int toFindLength) {
        bigEdit.requestFocus();
        // next two lines keep the found String selected
        bigEdit.setCaretPosition(location);
        bigEdit.moveCaretPosition(location + toFindLength);
    }

    public void replaceFeedback() {
        try {
            String replaceWith = replaceDReplaceCombo.getSelectedItem().toString();
            bigEdit.getDocument().remove(bigEdit.getSelectionStart(),
                    bigEdit.getSelectedText().length());
            bigEdit.getDocument().insertString(bigEdit.getSelectionStart(),
                    replaceWith, null);
        } catch (BadLocationException ex) {
        }
    }

    /**
     * Exit.
     * <br>
     * Exit from BIGNotepad. B-bye!
     * <br>
     *
     * @param mode "0" is received from "window closing" event or "File>Exit"
     * menu item.<br>"1" is received from JOptionPanes only. This means the file
     * has been saved.
     */
    protected void exit(int mode) {
        switch (mode) {
            case 0:
                if (askToSave) {
                    int status = SaveFile.valueOf(this).saveConfirmation();
                    /**
                     * Save Confirmation Window returns: -1 means
                     * saveConfirmation window was closed 0 means file was saved
                     * 1 means file was NOT saved 2 means cancel was selected
                     */
                    if (status != -1 & status != 2) {
                        System.exit(0);
                    }
                } else if (saveSettingsOnExit) {
                    SaveCurrentSettings.valueOf(this).saveSettings();
                    System.exit(0);
                } else {
                    System.exit(0);
                }
                // goddamn break statements!
                break;
            case 1:
                if (saveSettingsOnExit) {
                    SaveCurrentSettings.valueOf(this).saveSettings();
                } else {
                    System.exit(0);
                }
        }
    }

    /**
     * New Blank Document.
     * <br>
     * Creates a new blank document, currentlyOpenedFile becomes null, discard
     * all undoManager edits, askToSave becomes false and clears text.
     */
    protected void newBlankDocument() {
        bigEdit.setText("");
        this.setTitle(defaultTitle);
        // new blank document doesn't need saving yet
        askToSave = false;
        undoManager.discardAllEdits();
        currentlyOpenedFile = null;
        fileSetReadOnlyMenuItem.setSelected(false);
        fileIsReadOnly = false;
    }

    // the same as "getComboSearches" only for menu items.
    protected String[] getRecentFileItems() {
        String[] items = new String[recentFilesItems.length];
        for (int i = recentFilesItems.length - 1; i >= 0; i--) {
            items[i] = recentFilesItems[i];
        }
        return items;
    }

    /**
     * Get entries from find/replace combo boxes.
     *
     * Instead of hard-coding every element number to it's position, this method
     * goes through all items and collects them.
     *
     * @param comboName e.g. find window search combo
     * @return an array of strings who can be sent directly to properties file.
     */
    protected String[] getComboSearches(javax.swing.JComboBox comboName) {         // REVERSE!
        String[] temp = new String[comboName.getItemCount()];
        for (int i = 0; i < comboName.getItemCount(); i++) {
            if (temp[i] != null) {
                temp[i] = comboName.getItemAt(i).toString();
            }
        }
        return temp;
    }

    // set encoding 
    public void settEncoding(String encodeTo) {
        try {
            System.setProperty("file.encoding", encodeTo);
            Field charset = Charset.class
                    .getDeclaredField("defaultCharset");
            charset.setAccessible(true);
            charset.set(null, null);

            // update status bar label
            encodingStatusLabel.setText(encodeTo);
        } catch (NoSuchFieldException | SecurityException |
                IllegalArgumentException | IllegalAccessException ex) {
            System.err.println("Set encoding error: " + ex);
        }
    }

    // updates enable / disable Undo menu items
    protected void updateUndoMenuItems() {
        // main window menu "Edit Menu"
        editUndoMenuItem.setEnabled(undoManager.canUndo());
        editRedoMenuItem.setEnabled(undoManager.canRedo());
        // right-click menu
        quickUndo.setEnabled(undoManager.canUndo());
        quickRedo.setEnabled(undoManager.canRedo());
    }

    // toggle access to Edit menu items if user selected any text or not
    public void editMenuAccess(boolean state) {
        editConvertMenu.setEnabled(state);
        editCopyMenuItem.setEnabled(state);
        editCutMenuItem.setEnabled(state);
    }

    /**
     * Convert selected text to other type of case.
     * <br>
     *
     * @param toConvert string to convert
     * @param mode how to convert it
     * @return converted string;
     */
    private String convertor(String mode) {
        String result = bigEdit.getSelectedText();
        StringBuilder sb = new StringBuilder();
        // convert the string
        switch (mode) {
            case "low":
                result = result.toLowerCase();
                break;
            case "UP":
                result = result.toUpperCase();
                break;
            case "invert":
                for (int i = 0; i < result.length(); i++) {
                    char c = result.charAt(i);
                    if (Character.isLowerCase(c)) {
                        sb.append(Character.toUpperCase(c));
                    } else if (Character.isUpperCase(c)) {
                        sb.append(Character.toLowerCase(c));
                    }
                }
                result = sb.toString();
                break;
        }
        // replace the string inside the JEditorPane
        try {
            document.remove(bigEdit.getSelectionStart(),
                    bigEdit.getSelectedText().length());
            document.insertString(bigEdit.getSelectionStart(),
                    result, null);
        } catch (BadLocationException ex) {
            System.err.println(ex);
        }
        return result;
    }

    private void initConfig() {
        DefaultConfig def = new DefaultConfig(this);
        def.defaultSettings();
    }

    /**
     * File and window properties. <br>
     * Names are self-explanatory
     */
    protected boolean fileIsReadOnly;
    // checked at window closing and if true prompts to callSaveFile file
    protected boolean askToSave = false;
    protected boolean firstTimeOpen;

    protected String defaultTitle;
    protected File currentlyOpenedFile;
    protected String currentPath;
    protected String defaultTempFolder;

    // recent history temps
    protected String[] recentFilesItems;
    protected String[] findHistoryItems;
    protected String[] replaceHistoryItems;

    // 0 = fileName 
    protected int windowTitleDisplayMode;
    protected int zoomFactor = 100;

    // internal settings
    protected boolean alwaysOnTop;
    protected boolean minimizeToTray;
    protected boolean rememeberWinSize;
    protected boolean rememberRecentFiles;
    protected boolean rememberRecentSearches;
    protected boolean saveSettingsOnExit;
    protected boolean wordWrap;
    protected boolean displayLongLineMarker;
    protected boolean displayStatusBar;
    protected boolean displayQuickMenu;

    protected boolean displayLineNumbers;
    protected LineNumbers lineNumbers;

    protected UndoManager undoManager;
    protected StyledDocument document;
    protected SimpleAttributeSet attrs;

    protected TrayIcon trayIcon;
    protected SystemTray sysTray;
    protected String bigIcon;

    // status bar display
    public String defaultEncoding = "UTF-16"; // default for java Strings
    public String defaultSyntaxScheme = "Plain text";


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutAuthorMenuItem;
    protected javax.swing.JScrollPane aboutAuthorP;
    protected javax.swing.JPanel aboutAuthorPanel;
    protected javax.swing.JTextArea aboutAuthorText;
    protected javax.swing.JDialog aboutDialog;
    protected javax.swing.JTabbedPane aboutPane;
    protected javax.swing.JScrollPane aboutSoftwareP;
    protected javax.swing.JPanel aboutSoftwarePanel;
    protected javax.swing.JTextArea aboutSoftwareText;
    protected javax.swing.JTextPane bigEdit;
    protected javax.swing.JLabel clickable;
    protected javax.swing.JCheckBoxMenuItem displayLineNumMenuItem;
    private javax.swing.JMenuItem editClearClipboardMenuItem;
    private javax.swing.JMenuItem editConvInvertCase;
    private javax.swing.JMenuItem editConvToLowerCase;
    private javax.swing.JMenuItem editConvToUpperCase;
    private javax.swing.JMenu editConvertMenu;
    private javax.swing.JMenuItem editCopyMenuItem;
    private javax.swing.JMenuItem editCutMenuItem;
    private javax.swing.JMenu editInsertMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem editPasteMenuItem;
    protected javax.swing.JMenuItem editRedoMenuItem;
    private javax.swing.JMenuItem editSelectAllMenuItem;
    protected javax.swing.JMenuItem editUndoMenuItem;
    protected javax.swing.JScrollPane editorScrollPane;
    protected javax.swing.JLabel encodingStatusLabel;
    protected javax.swing.JPanel encodingStatusPanel;
    private javax.swing.JMenuItem fileEncodingANSI;
    private javax.swing.JMenuItem fileEncodingBE;
    private javax.swing.JMenuItem fileEncodingLatin1;
    private javax.swing.JMenuItem fileEncodingUTF8;
    private javax.swing.JMenuItem fileEncodingUnicode;
    private javax.swing.JMenuItem fileExitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileNewEmptyWindow;
    private javax.swing.JMenuItem fileNewMenuItem;
    private javax.swing.JMenuItem fileOpenMenuItem;
    private javax.swing.JMenuItem filePrintMenuItem;
    protected javax.swing.JMenu fileRecentMenu;
    private javax.swing.JMenuItem fileSaveAsMenuItem;
    private javax.swing.JMenuItem fileSaveMenuItem;
    private javax.swing.JPopupMenu.Separator fileSeparator1;
    private javax.swing.JPopupMenu.Separator fileSeparator2;
    private javax.swing.JPopupMenu.Separator fileSeparator3;
    private javax.swing.JPopupMenu.Separator fileSeparator4;
    private javax.swing.JPopupMenu.Separator fileSeparator5;
    private javax.swing.JPopupMenu.Separator fileSeparator6;
    private javax.swing.JCheckBoxMenuItem fileSetReadOnlyMenuItem;
    private javax.swing.JButton findDClose;
    private javax.swing.JButton findDFindNext;
    private javax.swing.JButton findDFindPrev;
    protected javax.swing.JCheckBox findDMatchCase;
    protected javax.swing.JCheckBox findDMatchWord;
    protected javax.swing.JCheckBox findDMatchWordStart;
    protected javax.swing.JCheckBox findDRegex;
    protected javax.swing.JComboBox findDSearchCombo;
    private javax.swing.JLabel findDSearchLabel;
    private javax.swing.JDialog findDialog;
    private javax.swing.JLabel findGotoReplace;
    private javax.swing.JMenuItem findMenuItem;
    protected javax.swing.JLabel findStringIcon;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpTopics;
    private javax.swing.JMenuItem insertLongDate;
    private javax.swing.JMenuItem insertShortDate;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    protected javax.swing.JLabel lineColSelStatusLabel;
    protected javax.swing.JPanel lineColSelStatusPanel;
    protected javax.swing.JMenuBar mainMenu;
    protected javax.swing.JPanel mainStatusPanel;
    protected javax.swing.JLabel newFileIcon;
    protected javax.swing.JLabel nothingFoundLabel;
    protected javax.swing.JLabel openFileIcon;
    protected javax.swing.JMenuItem quickClear;
    protected javax.swing.JMenuItem quickCopy;
    protected javax.swing.JMenuItem quickCopyAll;
    protected javax.swing.JMenuItem quickCut;
    protected javax.swing.JPanel quickIconsPanel;
    private javax.swing.JPopupMenu quickMenu;
    protected javax.swing.JPopupMenu.Separator quickMenuS1;
    protected javax.swing.JPopupMenu.Separator quickMenuS2;
    protected javax.swing.JMenuItem quickPaste;
    protected javax.swing.JMenuItem quickRedo;
    protected javax.swing.JMenuItem quickSelectAll;
    protected javax.swing.JMenuItem quickSwap;
    protected javax.swing.JMenuItem quickUndo;
    private javax.swing.JButton replaceDClose;
    private javax.swing.JButton replaceDFindNext;
    private javax.swing.JButton replaceDFindPrev;
    protected javax.swing.JCheckBox replaceDMatchCase;
    protected javax.swing.JCheckBox replaceDMatchWord;
    protected javax.swing.JCheckBox replaceDMatchWordStart;
    protected javax.swing.JLabel replaceDNothingFound;
    protected javax.swing.JCheckBox replaceDRegex;
    private javax.swing.JButton replaceDReplace;
    private javax.swing.JButton replaceDReplaceAll;
    protected javax.swing.JComboBox replaceDReplaceCombo;
    private javax.swing.JLabel replaceDReplaceLabel;
    protected javax.swing.JComboBox replaceDSearchCombo;
    private javax.swing.JLabel replaceDSearchLabel;
    private javax.swing.JDialog replaceDialog;
    private javax.swing.JLabel replaceGotoFind;
    private javax.swing.JMenuItem replaceMenuItem;
    protected javax.swing.JLabel saveFileIcon;
    protected javax.swing.JLabel separatorLabel;
    protected javax.swing.JLabel separatorLabel1;
    protected javax.swing.JLabel separatorLabel2;
    protected javax.swing.JLabel separatorLabel3;
    protected javax.swing.JCheckBoxMenuItem setMinToTrayMenuItem;
    protected javax.swing.JCheckBoxMenuItem settAlwaysOnTopMenuItem;
    protected javax.swing.JCheckBoxMenuItem settRecentFilesMenuItem;
    protected javax.swing.JCheckBoxMenuItem settRecentSearchMenuItem;
    protected javax.swing.JMenuItem settSaveNowMenuItem;
    protected javax.swing.JCheckBoxMenuItem settSaveOnExitMenuItem;
    private javax.swing.JMenu settingsMenu;
    protected javax.swing.JMenuItem settingsResetAll;
    protected javax.swing.JCheckBoxMenuItem settingsWinSizePosition;
    protected javax.swing.JMenuItem viewDefaultFont;
    protected javax.swing.JCheckBoxMenuItem viewLongLineMenuItem;
    private javax.swing.JMenu viewMenu;
    protected javax.swing.JCheckBoxMenuItem viewQuickMMenuItem;
    protected javax.swing.JMenuItem viewResetZoomMenuItem;
    protected javax.swing.JCheckBoxMenuItem viewStatusBarMenuItem;
    protected javax.swing.JMenuItem viewThemeMenuItem;
    protected javax.swing.JCheckBoxMenuItem viewWrapMenuItem;
    private javax.swing.JMenuItem winTitleDisplayMode0;
    private javax.swing.JMenuItem winTitleDisplayMode1;
    private javax.swing.JMenuItem winTitleDisplayMode2;
    // End of variables declaration//GEN-END:variables
}
